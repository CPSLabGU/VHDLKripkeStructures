{"interfaceLanguages":{"swift":[{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/edge\/==(_:_:)","title":"static func == (Edge, Edge) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/edge\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/vhdlkripkestructures\/edge\/init(target:cost:)","title":"init(target: Node, cost: Cost)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/edge\/cost","title":"let cost: Cost","type":"property"},{"path":"\/documentation\/vhdlkripkestructures\/edge\/target","title":"let target: Node","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/edge\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/edge\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlkripkestructures\/edge\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlkripkestructures\/edge","title":"Edge","type":"class"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/kripkestructure\/==(_:_:)","title":"static func == (KripkeStructure, KripkeStructure) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/kripkestructure\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/vhdlkripkestructures\/kripkestructure\/init(nodes:edges:initialstates:)","title":"init(nodes: [Node], edges: [Node : [Edge]], initialStates: Set<Node>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/kripkestructure\/edges","title":"let edges: [Node : [Edge]]","type":"property"},{"path":"\/documentation\/vhdlkripkestructures\/kripkestructure\/initialstates","title":"let initialStates: Set<Node>","type":"property"},{"path":"\/documentation\/vhdlkripkestructures\/kripkestructure\/nodes","title":"let nodes: [Node]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/kripkestructure\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/kripkestructure\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlkripkestructures\/kripkestructure\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/kripkestructure\/graphviz","title":"var graphviz: String","type":"property"}],"path":"\/documentation\/vhdlkripkestructures\/kripkestructure\/graphvizconvertible-implementations","title":"GraphvizConvertible Implementations","type":"symbol"}],"path":"\/documentation\/vhdlkripkestructures\/kripkestructure","title":"KripkeStructure","type":"class"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/node\/==(_:_:)","title":"static func == (Node, Node) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/node\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/vhdlkripkestructures\/node\/init(type:currentstate:executeonentry:nextstate:properties:)","title":"init(type: NodeType, currentState: VariableName, executeOnEntry: Bool, nextState: VariableName, properties: [VariableName : SignalLiteral])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/node\/currentstate","title":"let currentState: VariableName","type":"property"},{"path":"\/documentation\/vhdlkripkestructures\/node\/executeonentry","title":"let executeOnEntry: Bool","type":"property"},{"path":"\/documentation\/vhdlkripkestructures\/node\/nextstate","title":"let nextState: VariableName","type":"property"},{"path":"\/documentation\/vhdlkripkestructures\/node\/properties","title":"let properties: [VariableName : SignalLiteral]","type":"property"},{"path":"\/documentation\/vhdlkripkestructures\/node\/type","title":"let type: NodeType","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/node\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/node\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlkripkestructures\/node\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/node\/graphviz","title":"var graphviz: String","type":"property"}],"path":"\/documentation\/vhdlkripkestructures\/node\/graphvizconvertible-implementations","title":"GraphvizConvertible Implementations","type":"symbol"}],"path":"\/documentation\/vhdlkripkestructures\/node","title":"Node","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/graphvizconvertible\/graphviz","title":"var graphviz: String","type":"property"}],"path":"\/documentation\/vhdlkripkestructures\/graphvizconvertible","title":"GraphvizConvertible","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/quantifiable\/quantity","title":"var quantity: Double","type":"property"}],"path":"\/documentation\/vhdlkripkestructures\/quantifiable","title":"Quantifiable","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/sirepresentable\/coefficient","title":"var coefficient: UInt","type":"property"},{"path":"\/documentation\/vhdlkripkestructures\/sirepresentable\/exponent","title":"var exponent: Int","type":"property"}],"path":"\/documentation\/vhdlkripkestructures\/sirepresentable","title":"SIRepresentable","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/cost\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/vhdlkripkestructures\/cost\/init(time:energy:)","title":"init(time: ScientificQuantity, energy: ScientificQuantity)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/cost\/energy","title":"let energy: ScientificQuantity","type":"property"},{"path":"\/documentation\/vhdlkripkestructures\/cost\/time","title":"let time: ScientificQuantity","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/cost\/+(_:)","title":"static func + (Self) -> Self","type":"op"},{"path":"\/documentation\/vhdlkripkestructures\/cost\/+(_:_:)","title":"static func + (Cost, Cost) -> Cost","type":"op"},{"path":"\/documentation\/vhdlkripkestructures\/cost\/+=(_:_:)","title":"static func += (inout Self, Self)","type":"op"},{"path":"\/documentation\/vhdlkripkestructures\/cost\/-(_:_:)","title":"static func - (Cost, Cost) -> Cost","type":"op"},{"path":"\/documentation\/vhdlkripkestructures\/cost\/-=(_:_:)","title":"static func -= (inout Self, Self)","type":"op"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/cost\/zero","title":"static let zero: Cost","type":"property"}],"path":"\/documentation\/vhdlkripkestructures\/cost\/additivearithmetic-implementations","title":"AdditiveArithmetic Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/cost\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlkripkestructures\/cost\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/cost\/graphviz","title":"var graphviz: String","type":"property"}],"path":"\/documentation\/vhdlkripkestructures\/cost\/graphvizconvertible-implementations","title":"GraphvizConvertible Implementations","type":"symbol"}],"path":"\/documentation\/vhdlkripkestructures\/cost","title":"Cost","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/scientificquantity\/init(sivalue:)","title":"init<T>(SIValue: T)","type":"init"},{"path":"\/documentation\/vhdlkripkestructures\/scientificquantity\/init(coefficient:exponent:)","title":"init(coefficient: UInt, exponent: Int)","type":"init"},{"path":"\/documentation\/vhdlkripkestructures\/scientificquantity\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/scientificquantity\/coefficient","title":"let coefficient: UInt","type":"property"},{"path":"\/documentation\/vhdlkripkestructures\/scientificquantity\/exponent","title":"let exponent: Int","type":"property"},{"path":"\/documentation\/vhdlkripkestructures\/scientificquantity\/quantity","title":"var quantity: Double","type":"property"},{"path":"\/documentation\/vhdlkripkestructures\/scientificquantity\/sivalue","title":"var siValue: UnnormalisedScientificQuantity","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/scientificquantity\/+(_:)","title":"static func + (Self) -> Self","type":"op"},{"path":"\/documentation\/vhdlkripkestructures\/scientificquantity\/+(_:_:)","title":"static func + (ScientificQuantity, ScientificQuantity) -> ScientificQuantity","type":"op"},{"path":"\/documentation\/vhdlkripkestructures\/scientificquantity\/+=(_:_:)","title":"static func += (inout Self, Self)","type":"op"},{"path":"\/documentation\/vhdlkripkestructures\/scientificquantity\/-(_:_:)","title":"static func - (ScientificQuantity, ScientificQuantity) -> ScientificQuantity","type":"op"},{"path":"\/documentation\/vhdlkripkestructures\/scientificquantity\/-=(_:_:)","title":"static func -= (inout Self, Self)","type":"op"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/scientificquantity\/zero-4hke4","title":"static let zero: ScientificQuantity","type":"property"},{"path":"\/documentation\/vhdlkripkestructures\/scientificquantity\/zero-6st3b","title":"static var zero: Self","type":"property"}],"path":"\/documentation\/vhdlkripkestructures\/scientificquantity\/additivearithmetic-implementations","title":"AdditiveArithmetic Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/scientificquantity\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/vhdlkripkestructures\/scientificquantity\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/scientificquantity\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlkripkestructures\/scientificquantity\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/scientificquantity\/init(floatliteral:)","title":"init(floatLiteral: Double)","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/scientificquantity\/floatliteraltype","title":"ScientificQuantity.FloatLiteralType","type":"typealias"}],"path":"\/documentation\/vhdlkripkestructures\/scientificquantity\/expressiblebyfloatliteral-implementations","title":"ExpressibleByFloatLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/scientificquantity\/init(integerliteral:)","title":"init(integerLiteral: UInt)","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/scientificquantity\/integerliteraltype","title":"ScientificQuantity.IntegerLiteralType","type":"typealias"}],"path":"\/documentation\/vhdlkripkestructures\/scientificquantity\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/scientificquantity\/*(_:_:)","title":"static func * (ScientificQuantity, ScientificQuantity) -> ScientificQuantity","type":"op"},{"path":"\/documentation\/vhdlkripkestructures\/scientificquantity\/*=(_:_:)","title":"static func *= (inout ScientificQuantity, ScientificQuantity)","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/scientificquantity\/init(exactly:)","title":"init?<T>(exactly: T)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/scientificquantity\/magnitude-swift.property","title":"var magnitude: Double","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/scientificquantity\/magnitude-swift.typealias","title":"ScientificQuantity.Magnitude","type":"typealias"}],"path":"\/documentation\/vhdlkripkestructures\/scientificquantity\/numeric-implementations","title":"Numeric Implementations","type":"symbol"}],"path":"\/documentation\/vhdlkripkestructures\/scientificquantity","title":"ScientificQuantity","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/unnormalisedscientificquantity\/init(coefficient:exponent:)","title":"init(coefficient: UInt, exponent: Int)","type":"init"},{"path":"\/documentation\/vhdlkripkestructures\/unnormalisedscientificquantity\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/vhdlkripkestructures\/unnormalisedscientificquantity\/init(quantity:)","title":"init(quantity: ScientificQuantity)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/unnormalisedscientificquantity\/coefficient","title":"let coefficient: UInt","type":"property"},{"path":"\/documentation\/vhdlkripkestructures\/unnormalisedscientificquantity\/exponent","title":"let exponent: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/unnormalisedscientificquantity\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlkripkestructures\/unnormalisedscientificquantity\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlkripkestructures\/unnormalisedscientificquantity","title":"UnnormalisedScientificQuantity","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/nodetype\/read","title":"case read","type":"case"},{"path":"\/documentation\/vhdlkripkestructures\/nodetype\/write","title":"case write","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/nodetype\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlkripkestructures\/nodetype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlkripkestructures\/nodetype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlkripkestructures\/nodetype","title":"NodeType","type":"enum"}],"path":"\/documentation\/vhdlkripkestructures","title":"VHDLKripkeStructures","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}